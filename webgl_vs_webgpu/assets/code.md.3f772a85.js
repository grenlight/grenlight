import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.492110cb.js";const C=JSON.parse('{"title":"代码说明","description":"","frontmatter":{},"headers":[],"relativePath":"code.md","filePath":"code.md"}'),p={name:"code.md"},o=l(`<h1 id="代码说明" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明" aria-label="Permalink to &quot;代码说明&quot;">​</a></h1><p>页面右上角的 github 图标可跳转到代码库</p><h2 id="使用的同一份代码编译为-webgl-或-webgpu-目标" tabindex="-1">使用的同一份代码编译为 WebGL 或 WebGPU 目标 <a class="header-anchor" href="#使用的同一份代码编译为-webgl-或-webgpu-目标" aria-label="Permalink to &quot;使用的同一份代码编译为 WebGL 或 WebGPU 目标&quot;">​</a></h2><p><strong>wgpu</strong> (dawn 也是) 实现的 WebGPU 接口支持通过编译参数设置来运行时要使用的图形接口后端，但在使用 WebGL 时功能特性会受到限制。这与 WebGL 库对接 WebGPU 接口有所不同：因为 WebGPU 接口是基于管线的，由管线映可直接射回状态机。然而，基于状态机的接口映射到管线时，不仅功能受限，还会极大地降低管线的复用性，从而导致性能损耗。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 构建 webgpu 包并运行</span></span>
<span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run-wasm</span></span>
<span class="line"><span style="color:#6A737D;"># 构建 webgl 包并运行</span></span>
<span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run-wasm</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--features=webgl</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 构建 webgpu 包并运行</span></span>
<span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run-wasm</span></span>
<span class="line"><span style="color:#6A737D;"># 构建 webgl 包并运行</span></span>
<span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run-wasm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--features=webgl</span></span></code></pre></div><h2 id="帧时间统计" tabindex="-1">帧时间统计 <a class="header-anchor" href="#帧时间统计" aria-label="Permalink to &quot;帧时间统计&quot;">​</a></h2><p>帧时间统计由是前 200 帧计算的平均值：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FrameHistory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 上一帧开始到当前帧开始的时间间隔历史</span></span>
<span class="line"><span style="color:#E1E4E8;">    frame_times</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">History</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#6A737D;">    // 一帧内的 cpu 耗时历史</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpu_usage_times</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">History</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#6A737D;">    // UI 刷新计数，用于降低 UI 上数值的刷新率（不影响准确性）</span></span>
<span class="line"><span style="color:#E1E4E8;">    refresh_count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u64</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // 帧率</span></span>
<span class="line"><span style="color:#E1E4E8;">    frame_rate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // 单帧 cpu 耗时</span></span>
<span class="line"><span style="color:#E1E4E8;">    cpu_usage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FrameHistory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Self</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 最大时间步长为 1 秒</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> max_age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Self</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            frame_times</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">History</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, max_age),</span></span>
<span class="line"><span style="color:#E1E4E8;">            cpu_usage_times</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">History</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, max_age),</span></span>
<span class="line"><span style="color:#E1E4E8;">            refresh_count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            frame_rate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            cpu_usage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FrameHistory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on_new_frame</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, now</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f64</span><span style="color:#E1E4E8;">, frame_time</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">, cpu_usage_time</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f32</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">frame_times</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(now, frame_time);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">cpu_usage_times</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(now, cpu_usage_time);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">refresh_count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">refresh_count </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">            // 每 20 帧重新计算一次待显示的帧数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">frame_rate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">frame_times</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">average</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap_or_default</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">cpu_usage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">cpu_usage_times</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">average</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap_or_default</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#F97583;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FrameHistory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 上一帧开始到当前帧开始的时间间隔历史</span></span>
<span class="line"><span style="color:#24292E;">    frame_times</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">History</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#6A737D;">    // 一帧内的 cpu 耗时历史</span></span>
<span class="line"><span style="color:#24292E;">    cpu_usage_times</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">History</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#6A737D;">    // UI 刷新计数，用于降低 UI 上数值的刷新率（不影响准确性）</span></span>
<span class="line"><span style="color:#24292E;">    refresh_count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u64</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // 帧率</span></span>
<span class="line"><span style="color:#24292E;">    frame_rate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // 单帧 cpu 耗时</span></span>
<span class="line"><span style="color:#24292E;">    cpu_usage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FrameHistory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Self</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 最大时间步长为 1 秒</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> max_age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Self</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            frame_times</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">History</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, max_age),</span></span>
<span class="line"><span style="color:#24292E;">            cpu_usage_times</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">History</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, max_age),</span></span>
<span class="line"><span style="color:#24292E;">            refresh_count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            frame_rate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            cpu_usage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FrameHistory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_new_frame</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, now</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f64</span><span style="color:#24292E;">, frame_time</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">, cpu_usage_time</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f32</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">frame_times</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(now, frame_time);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">cpu_usage_times</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(now, cpu_usage_time);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">refresh_count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">refresh_count </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">            // 每 20 帧重新计算一次待显示的帧数据</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">frame_rate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">frame_times</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">average</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap_or_default</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">cpu_usage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">cpu_usage_times</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">average</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap_or_default</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#D73A49;">.</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="测试场景" tabindex="-1">测试场景 <a class="header-anchor" href="#测试场景" aria-label="Permalink to &quot;测试场景&quot;">​</a></h2><p>每帧 1000 个 draw call + 1000 次 buffer 修改：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 管线数量</span></span>
<span class="line"><span style="color:#6A737D;">/// 管线本身是可重用的，为了测试，用最差的做法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PSO_COUNT</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompScenario</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThousandsEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">draw_by_pass</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">, &#39;</span><span style="color:#B392F0;">b</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">&#39;</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, app</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">AppSurface</span><span style="color:#E1E4E8;">, rpass</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wgpu</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">RenderPass</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 先更新数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">PSO_COUNT</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> original_mat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model_uniform_data[i </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usize</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> model_mat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glam</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Mat4</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_cols_array_2d</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">original_mat</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model_mat);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rotation_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model_rotation_data[i </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usize</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            rotation_data</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.05</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> rotation_data</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rotation_mat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glam</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Mat4</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_axis_angle</span><span style="color:#E1E4E8;">(rotation_data</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, rotation_data</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a_model_mat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (model_mat </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> rotation_mat)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_cols_array_2d</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            app</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">queue</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">write_buffer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model_uniform_buf[i]</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">buffer,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">bytemuck</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">bytes_of</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a_model_mat),</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 再绘制</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">PSO_COUNT</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            rpass</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">set_pipeline</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">pipeline_list[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">            rpass</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">set_bind_group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">bg_setting_list[i]</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">bind_group, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">[]);</span></span>
<span class="line"><span style="color:#E1E4E8;">            rpass</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">set_index_buffer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">index_buf_list[i]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">wgpu</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">IndexFormat</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Uint32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">            rpass</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">set_vertex_buffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">vertex_buf_list[i]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            rpass</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">draw_indexed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">index_count, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 管线数量</span></span>
<span class="line"><span style="color:#6A737D;">/// 管线本身是可重用的，为了测试，用最差的做法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PSO_COUNT</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompScenario</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThousandsEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">draw_by_pass</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">, &#39;</span><span style="color:#6F42C1;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> &#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">&#39;</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, app</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">AppSurface</span><span style="color:#24292E;">, rpass</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wgpu</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">RenderPass</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 先更新数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">PSO_COUNT</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> original_mat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model_uniform_data[i </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usize</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> model_mat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glam</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Mat4</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_cols_array_2d</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">original_mat</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model_mat);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rotation_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model_rotation_data[i </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usize</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            rotation_data</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.05</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> rotation_data</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rotation_mat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glam</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Mat4</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_axis_angle</span><span style="color:#24292E;">(rotation_data</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, rotation_data</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a_model_mat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (model_mat </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> rotation_mat)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_cols_array_2d</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            app</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">queue</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">write_buffer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model_uniform_buf[i]</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">buffer,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">bytemuck</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">bytes_of</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a_model_mat),</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 再绘制</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">PSO_COUNT</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            rpass</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">set_pipeline</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">pipeline_list[i]);</span></span>
<span class="line"><span style="color:#24292E;">            rpass</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">set_bind_group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">bg_setting_list[i]</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">bind_group, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">[]);</span></span>
<span class="line"><span style="color:#24292E;">            rpass</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">set_index_buffer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">index_buf_list[i]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">wgpu</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">IndexFormat</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Uint32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">            rpass</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">set_vertex_buffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">vertex_buf_list[i]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            rpass</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">draw_indexed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">model</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">index_count, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,11),e=[o];function t(c,r,y,E,F,i){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{C as __pageData,m as default};
